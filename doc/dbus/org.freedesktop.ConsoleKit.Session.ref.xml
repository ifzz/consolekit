<refentry id="Session">
  <refmeta>
    <refentrytitle role="top_of_page">org.freedesktop.ConsoleKit.Session</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>org.freedesktop.ConsoleKit.Session</refname>
    <refpurpose>Session interface</refpurpose>
  </refnamediv>
  <refsynopsisdiv role="synopsis">
    <title role="synopsis.title">Methods</title>
    <synopsis><link linkend="Session.GetId">GetId</link>               (out 'o' ssid)
<link linkend="Session.GetSeatId">GetSeatId</link>           (out 'o' sid)
<link linkend="Session.GetSessionType">GetSessionType</link>      (out 's' type)
<link linkend="Session.GetUser">GetUser</link>             (out 'u' uid)
<link linkend="Session.GetUnixUser">GetUnixUser</link>         (out 'u' uid)
<link linkend="Session.GetX11Display">GetX11Display</link>       (out 's' display)
<link linkend="Session.GetX11DisplayDevice">GetX11DisplayDevice</link> (out 's' x11_display_device)
<link linkend="Session.GetDisplayDevice">GetDisplayDevice</link>    (out 's' display_device)
<link linkend="Session.GetRemoteHostName">GetRemoteHostName</link>   (out 's' remote_host_name)
<link linkend="Session.GetLoginSessionId">GetLoginSessionId</link>   (out 's' login_session_id)
<link linkend="Session.IsActive">IsActive</link>            (out 'b' active)
<link linkend="Session.IsLocal">IsLocal</link>             (out 'b' local)
<link linkend="Session.GetCreationTime">GetCreationTime</link>     (out 's' iso8601_datetime)
<link linkend="Session.Activate">Activate</link>            ()
<link linkend="Session.Lock">Lock</link>                ()
<link linkend="Session.Unlock">Unlock</link>              ()
<link linkend="Session.GetIdleHint">GetIdleHint</link>         (out 'b' idle_hint)
<link linkend="Session.GetIdleSinceHint">GetIdleSinceHint</link>    (out 's' iso8601_datetime)
<link linkend="Session.SetIdleHint">SetIdleHint</link>         (in  'b' idle_hint)
</synopsis>
  </refsynopsisdiv>
  <refsect1 role="signal_proto">
    <title role="signal_proto.title">Signals</title>
    <synopsis><link linkend="Session::ActiveChanged">ActiveChanged</link>   ('b' is_active)
<link linkend="Session::IdleHintChanged">IdleHintChanged</link> ('b' hint)
<link linkend="Session::Lock">Lock</link>            ()
<link linkend="Session::Unlock">Unlock</link>          ()
</synopsis>
  </refsect1>
  <refsect1 role="impl_interfaces">
    <title role="impl_interfaces.title">Implemented Interfaces</title>
    <para>
    Objects implementing org.freedesktop.ConsoleKit.Session also implements
    org.freedesktop.DBus.Introspectable,
    org.freedesktop.DBus.Properties
    </para>
  </refsect1>
  <refsect1 role="properties">
    <title role="properties.title">Properties</title>
    <synopsis><link linkend="Session:unix-user">'unix-user'</link>          readwrite 'u'
<link linkend="Session:user">'user'</link>               readwrite 'u'
<link linkend="Session:session-type">'session-type'</link>       readwrite 's'
<link linkend="Session:remote-host-name">'remote-host-name'</link>   readwrite 's'
<link linkend="Session:display-device">'display-device'</link>     readwrite 's'
<link linkend="Session:x11-display">'x11-display'</link>        readwrite 's'
<link linkend="Session:x11-display-device">'x11-display-device'</link> readwrite 's'
<link linkend="Session:active">'active'</link>             readwrite 'b'
<link linkend="Session:is-local">'is-local'</link>           readwrite 'b'
<link linkend="Session:idle-hint">'idle-hint'</link>          readwrite 'b'
</synopsis>
  </refsect1>
  <refsect1 role="desc"><title role="desc.title">Description</title>
      
        <para>Session objects represent and store information
        related to a user session.
        </para>
        <para>The properties associated with the Session
        specifically refer to the properties of the "session leader".
        </para>
      
    </refsect1>
  <refsect1 role="details">
    <title role="details.title">Details</title>
    <refsect2><title><anchor role="function" id="Session.GetId"/>GetId ()</title><indexterm><primary>GetId</primary><secondary>Session</secondary></indexterm><programlisting>GetId (out 'o' ssid)</programlisting><para>Returns the ID for Session.</para>
        <variablelist role="params"><varlistentry><term><parameter>ssid</parameter>:</term><listitem><simpara>Session ID</simpara></listitem></varlistentry></variablelist></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetSeatId"/>GetSeatId ()</title><indexterm><primary>GetSeatId</primary><secondary>Session</secondary></indexterm><programlisting>GetSeatId (out 'o' sid)</programlisting><para>Returns the ID for the Seat the Session is
        attached to.</para>
        <variablelist role="params"><varlistentry><term><parameter>sid</parameter>:</term><listitem><simpara>Seat ID</simpara></listitem></varlistentry></variablelist><para>
See also:
<link linkend="Seat">org.freedesktop.ConsoleKit.Seat</link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetSessionType"/>GetSessionType ()</title><indexterm><primary>GetSessionType</primary><secondary>Session</secondary></indexterm><programlisting>GetSessionType (out 's' type)</programlisting>
          <para>Returns the type of the session.</para>
          <para>Warning: we haven't yet defined the allowed values for this property.
          It is probably best to avoid this until we do.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>type</parameter>:</term><listitem><simpara>Session type</simpara></listitem></varlistentry></variablelist><para>
See also:
<link linkend="Session:session-type"><literal>session-type</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetUser"/>GetUser ()</title><indexterm><primary>GetUser</primary><secondary>Session</secondary></indexterm><programlisting>GetUser (out 'u' uid)</programlisting><para>Returns the user that the session belongs to.</para>
        <variablelist role="params"><varlistentry><term><parameter>uid</parameter>:</term><listitem><simpara>User ID</simpara></listitem></varlistentry></variablelist><para role="deprecated"><warning><para><literal>GetUser</literal> is deprecated since version 0.1.3 and should not be used in newly-written code. Use

  <link linkend="Session.GetUnixUser"><function>GetUnixUser</function></link>
instead.</para></warning></para><para>
See also:
<link linkend="Session:user"><literal>user</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetUnixUser"/>GetUnixUser ()</title><indexterm><primary>GetUnixUser</primary><secondary>Session</secondary></indexterm><programlisting>GetUnixUser (out 'u' uid)</programlisting><para>Returns the POSIX user ID that the session belongs to.</para>
        <variablelist role="params"><varlistentry><term><parameter>uid</parameter>:</term><listitem><simpara>POSIX User ID</simpara></listitem></varlistentry></variablelist><para>
See also:
<link linkend="Session:unix-user"><literal>unix-user</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetX11Display"/>GetX11Display ()</title><indexterm><primary>GetX11Display</primary><secondary>Session</secondary></indexterm><programlisting>GetX11Display (out 's' display)</programlisting><para>Returns the value of the X11 DISPLAY for this session
        if one is present.</para>
        <variablelist role="params"><varlistentry><term><parameter>display</parameter>:</term><listitem><simpara>The value of the X11 display</simpara></listitem></varlistentry></variablelist><para>
See also:
<link linkend="Session:x11-display"><literal>x11-display</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetX11DisplayDevice"/>GetX11DisplayDevice ()</title><indexterm><primary>GetX11DisplayDevice</primary><secondary>Session</secondary></indexterm><programlisting>GetX11DisplayDevice (out 's' x11_display_device)</programlisting><para>Returns the value of the display device (aka TTY) that the
        X11 display for the session is connected to.  If there is no x11-display set then this value
        is undefined.</para>
        <variablelist role="params"><varlistentry><term><parameter>x11_display_device</parameter>:</term><listitem><simpara>The value of the X11 display device</simpara></listitem></varlistentry></variablelist><para>
See also:
<link linkend="Session:x11-display-device"><literal>x11-display-device</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetDisplayDevice"/>GetDisplayDevice ()</title><indexterm><primary>GetDisplayDevice</primary><secondary>Session</secondary></indexterm><programlisting>GetDisplayDevice (out 's' display_device)</programlisting><para>Returns the value of the display device (aka TTY) that the
        session is connected to.</para>
        <variablelist role="params"><varlistentry><term><parameter>display_device</parameter>:</term><listitem><simpara>The value of the display device</simpara></listitem></varlistentry></variablelist><para>
See also:
<link linkend="Session:display-device"><literal>display-device</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetRemoteHostName"/>GetRemoteHostName ()</title><indexterm><primary>GetRemoteHostName</primary><secondary>Session</secondary></indexterm><programlisting>GetRemoteHostName (out 's' remote_host_name)</programlisting><para>Returns the value of the remote host name for the session.
        </para>
        <variablelist role="params"><varlistentry><term><parameter>remote_host_name</parameter>:</term><listitem><simpara>The remote host name</simpara></listitem></varlistentry></variablelist><para>
See also:
<link linkend="Session:remote-host-name"><literal>remote-host-name</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetLoginSessionId"/>GetLoginSessionId ()</title><indexterm><primary>GetLoginSessionId</primary><secondary>Session</secondary></indexterm><programlisting>GetLoginSessionId (out 's' login_session_id)</programlisting><para>Returns the value of the login session ID that the
        underlying system uses to enforce session boundaries.  If there is no login session ID
        set then this value is an empty string.</para>
        <variablelist role="params"><varlistentry><term><parameter>login_session_id</parameter>:</term><listitem><simpara>The value of the native system login session ID</simpara></listitem></varlistentry></variablelist></refsect2>
    <refsect2><title><anchor role="function" id="Session.IsActive"/>IsActive ()</title><indexterm><primary>IsActive</primary><secondary>Session</secondary></indexterm><programlisting>IsActive (out 'b' active)</programlisting><para>Returns whether the session is active on the Seat that
        it is attached to.</para>
        <para>If the session is not attached to a seat this value is undefined.
        </para>
        <variablelist role="params"><varlistentry><term><parameter>active</parameter>:</term><listitem><simpara>TRUE if the session is active, otherwise FALSE</simpara></listitem></varlistentry></variablelist><para>
See also:
<link linkend="Session:active"><literal>active</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.IsLocal"/>IsLocal ()</title><indexterm><primary>IsLocal</primary><secondary>Session</secondary></indexterm><programlisting>IsLocal (out 'b' local)</programlisting><para>Returns whether the session is local</para>
        <para>FIXME: we need to come up with a concrete definition for this value.
        It was originally used as a way to identify XDMCP sessions that originate
        from a remote system.
        </para>
        <variablelist role="params"><varlistentry><term><parameter>local</parameter>:</term><listitem><simpara>TRUE if the session is local, otherwise FALSE</simpara></listitem></varlistentry></variablelist><para>
See also:
<link linkend="Session:is-local"><literal>is-local</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetCreationTime"/>GetCreationTime ()</title><indexterm><primary>GetCreationTime</primary><secondary>Session</secondary></indexterm><programlisting>GetCreationTime (out 's' iso8601_datetime)</programlisting>
          <para>Returns an ISO 8601 date-time string that corresponds to
          the time that the session was opened.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>iso8601_datetime</parameter>:</term><listitem><simpara>An ISO 8601 format date-type string</simpara></listitem></varlistentry></variablelist></refsect2>
    <refsect2><title><anchor role="function" id="Session.Activate"/>Activate ()</title><indexterm><primary>Activate</primary><secondary>Session</secondary></indexterm><programlisting>Activate ()</programlisting>
          <para>Attempt to activate the this session.  In most
          cases, if successful, this will cause the session to
          become visible and become active on the seat that it
          is attached to.</para>
        <para>
See also:
<link linkend="Seat.ActivateSession"><function>Seat.ActivateSession()</function></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.Lock"/>Lock ()</title><indexterm><primary>Lock</primary><secondary>Session</secondary></indexterm><programlisting>Lock ()</programlisting>
          <para>This will cause a <link linkend="Session::Lock"><literal>Lock</literal></link>
          signal to be emitted for this session.
          </para>
        <note><title>Permissions</title><para role="permission">This method is restricted to privileged users by D-Bus policy.</para></note><para>
See also:
<link linkend="Session::Lock"><literal>Lock signal</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.Unlock"/>Unlock ()</title><indexterm><primary>Unlock</primary><secondary>Session</secondary></indexterm><programlisting>Unlock ()</programlisting>
          <para>This will cause an <link linkend="Session::Unlock"><literal>Unlock</literal></link>
          signal to be emitted for this session.
          </para>
          <para>This can be used by login managers to unlock a session before it is
          re-activated during fast-user-switching.
          </para>
        <note><title>Permissions</title><para role="permission">This method is restricted to privileged users by D-Bus policy.</para></note><para>
See also:
<link linkend="Session::Unlock"><literal>Unlock signal</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetIdleHint"/>GetIdleHint ()</title><indexterm><primary>GetIdleHint</primary><secondary>Session</secondary></indexterm><programlisting>GetIdleHint (out 'b' idle_hint)</programlisting>
          <para>Gets the value of the <link linkend="Session:idle-hint"><literal>idle-hint</literal></link>
          property.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>idle_hint</parameter>:</term><listitem><simpara>The value of the idle-hint</simpara></listitem></varlistentry></variablelist><para>
See also:
<link linkend="Session:idle-hint"><literal>idle-hint</literal></link></para></refsect2>
    <refsect2><title><anchor role="function" id="Session.GetIdleSinceHint"/>GetIdleSinceHint ()</title><indexterm><primary>GetIdleSinceHint</primary><secondary>Session</secondary></indexterm><programlisting>GetIdleSinceHint (out 's' iso8601_datetime)</programlisting>
          <para>Returns an ISO 8601 date-time string that corresponds to
          the time of the last change of the idle-hint.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>iso8601_datetime</parameter>:</term><listitem><simpara>An ISO 8601 format date-type string</simpara></listitem></varlistentry></variablelist></refsect2>
    <refsect2><title><anchor role="function" id="Session.SetIdleHint"/>SetIdleHint ()</title><indexterm><primary>SetIdleHint</primary><secondary>Session</secondary></indexterm><programlisting>SetIdleHint (in  'b' idle_hint)</programlisting>
          <para>This may be used by the session to indicate that
          it is idle.
          </para>
          <para>Use of this method is restricted to the user
          that owns the session.</para>
        <variablelist role="params"><varlistentry><term><parameter>idle_hint</parameter>:</term><listitem><simpara>boolean value to set the idle-hint to</simpara></listitem></varlistentry></variablelist></refsect2>
  </refsect1>
  <refsect1 role="signals">
    <title role="signals.title">Signal Details</title>
    <refsect2><title><anchor role="function" id="Session::ActiveChanged"/>The ActiveChanged signal</title><indexterm><primary>ActiveChanged</primary><secondary>Session</secondary></indexterm><programlisting>ActiveChanged ('b' is_active)</programlisting>
          <para>Emitted when the active property has changed.</para>
        <variablelist role="params"><varlistentry><term><parameter>is_active</parameter>:</term><listitem><simpara>TRUE if the session is active, otherwise FALSE</simpara></listitem></varlistentry></variablelist></refsect2>
    <refsect2><title><anchor role="function" id="Session::IdleHintChanged"/>The IdleHintChanged signal</title><indexterm><primary>IdleHintChanged</primary><secondary>Session</secondary></indexterm><programlisting>IdleHintChanged ('b' hint)</programlisting>
          <para>Emitted when the idle-hint property has changed.</para>
        <variablelist role="params"><varlistentry><term><parameter>hint</parameter>:</term><listitem><simpara>the new value of idle-hint</simpara></listitem></varlistentry></variablelist></refsect2>
    <refsect2><title><anchor role="function" id="Session::Lock"/>The Lock signal</title><indexterm><primary>Lock</primary><secondary>Session</secondary></indexterm><programlisting>Lock ()</programlisting>
          <para>Emitted in response to a call to the <link linkend="Session.Lock"><function>Lock()</function></link> method.</para>
          <para>It is intended that the screensaver for the session should lock the screen in response to this signal.</para>
        </refsect2>
    <refsect2><title><anchor role="function" id="Session::Unlock"/>The Unlock signal</title><indexterm><primary>Unlock</primary><secondary>Session</secondary></indexterm><programlisting>Unlock ()</programlisting>
          <para>Emitted in response to a call to the <link linkend="Session.Unlock"><function>Unlock()</function></link> method.</para>
          <para>It is intended that the screensaver for the session should unlock the screen in response to this signal.</para>
        </refsect2>
  </refsect1>
  <refsect1 role="property_details">
    <title role="property_details.title">Property Details</title>
    <refsect2><title><anchor role="function" id="Session:unix-user"/>The "unix-user" property</title><indexterm><primary>unix-user</primary><secondary>Session</secondary></indexterm><programlisting>'unix-user'  readwrite 'u'
</programlisting>
          <para>The user assigned to the session.</para>
        </refsect2>
    <refsect2><title><anchor role="function" id="Session:user"/>The "user" property</title><indexterm><primary>user</primary><secondary>Session</secondary></indexterm><programlisting>'user'  readwrite 'u'
</programlisting>
          <para>The user assigned to the session.</para>
        <para role="deprecated"><warning><para><literal>user</literal> is deprecated since version 0.1.3 and should not be used in newly-written code. Use

  <link linkend="Session:unix-user"><literal>unix-user</literal></link>
instead.</para></warning></para></refsect2>
    <refsect2><title><anchor role="function" id="Session:session-type"/>The "session-type" property</title><indexterm><primary>session-type</primary><secondary>Session</secondary></indexterm><programlisting>'session-type'  readwrite 's'
</programlisting>
          <para>The type of the session.</para>
          <para>Warning: we haven't yet defined the allowed values for this property.
          It is probably best to avoid this until we do.
          </para>
        </refsect2>
    <refsect2><title><anchor role="function" id="Session:remote-host-name"/>The "remote-host-name" property</title><indexterm><primary>remote-host-name</primary><secondary>Session</secondary></indexterm><programlisting>'remote-host-name'  readwrite 's'
</programlisting>
          <para>The remote host name for the session.
          </para>
          <para>This will be set in situations where the session is
          opened and controlled from a remote system.
          </para>
          <para>For example, this value will be set when the
          session is created from an SSH or XDMCP connection.
          </para>
        </refsect2>
    <refsect2><title><anchor role="function" id="Session:display-device"/>The "display-device" property</title><indexterm><primary>display-device</primary><secondary>Session</secondary></indexterm><programlisting>'display-device'  readwrite 's'
</programlisting>
          <para>The display device (aka TTY) that the
          session is connected to.
          </para>
        </refsect2>
    <refsect2><title><anchor role="function" id="Session:x11-display"/>The "x11-display" property</title><indexterm><primary>x11-display</primary><secondary>Session</secondary></indexterm><programlisting>'x11-display'  readwrite 's'
</programlisting>
          <para>Value of the X11 DISPLAY for this session
          if one is present.
          </para>
        </refsect2>
    <refsect2><title><anchor role="function" id="Session:x11-display-device"/>The "x11-display-device" property</title><indexterm><primary>x11-display-device</primary><secondary>Session</secondary></indexterm><programlisting>'x11-display-device'  readwrite 's'
</programlisting>
          <para>
          The display device (aka TTY) that the X11 display for the
          session is connected to.  If there is no x11-display set then
          this value is undefined.
          </para>
        </refsect2>
    <refsect2><title><anchor role="function" id="Session:active"/>The "active" property</title><indexterm><primary>active</primary><secondary>Session</secondary></indexterm><programlisting>'active'  readwrite 'b'
</programlisting>
          <para>
          Whether the session is active on the Seat that
          it is attached to.</para>
          <para>If the session is not attached to a seat this value is undefined.
          </para>
        </refsect2>
    <refsect2><title><anchor role="function" id="Session:is-local"/>The "is-local" property</title><indexterm><primary>is-local</primary><secondary>Session</secondary></indexterm><programlisting>'is-local'  readwrite 'b'
</programlisting>
          <para>
          Whether the session is local</para>
          <para>FIXME: we need to come up with a concrete definition for this value.
          It was originally used as a way to identify XDMCP sessions that originate
          from a remote system.
          </para>
        </refsect2>
    <refsect2><title><anchor role="function" id="Session:idle-hint"/>The "idle-hint" property</title><indexterm><primary>idle-hint</primary><secondary>Session</secondary></indexterm><programlisting>'idle-hint'  readwrite 'b'
</programlisting>
          <para>
          This is a hint used to indicate that the session may be idle.
          </para>
          <para>
          For sessions with a <link linkend="Session:x11-display"><literal>x11-display</literal></link> set (ie. graphical
          sessions), it is up to each session to delegate the
          responsibility for updating this value.  Typically, the
          screensaver will set this.
          </para>
          <para>However, for non-graphical sessions with a <link linkend="Session:display-device"><literal>display-device</literal></link> set
          the Session object itself will periodically update this value based
          on the activity detected on the display-device itself.
          </para>
          <para>
          This should not be considered authoritative.
          </para>
        </refsect2>
  </refsect1>
</refentry>
